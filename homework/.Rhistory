## 2) call lo.lev to obtain the diagonal entries of S
## 3) compute LOO-CV and GCV using formula from lecture notes
##    [lec_W5_NonlinearRegression.pdf] page 33.
return(list(cv = cv, gcv = gcv))
}
myCV <- function(x1, y1, span){
## x1, y1: two vectors
## span: a sequence of values for "span"
m = length(span)
cv = rep(0, m)
gcv = rep(0, m)
for(i in 1:m){
tmp = onestep_CV(x1, y1, span[i])
cv[i] = tmp$cv
gcv[i] = tmp$gcv
}
return(list(cv = cv, gcv = gcv))
}
smooth.matrix = function(x, df){
# return the smoother matrix with knots x and degree of freedom = df
# this function is for x having unique values
n = length(x);
A = matrix(0, n, n);
for(i in 1:n){
y = rep(0, n); y[i]=1;
yi = smooth.spline(x, y, df=df)$y;
A[,i]= yi;
}
return((A+t(A))/2)
}
mydata = read.csv(file = "Coding3_Bonus_Data.csv")
dim(mydata)
S4 = smooth.matrix(mydata$x, df=4)
my_S4 = lo.lev(mydata$x, sp=4)
lo.lev <- function(x1, sp){
## YOUR CODE: compute the diagonal entries of the smoother
##             matrix S, stored in vector "lev"
## Tip: check how we compute the smoother matrix
##      for smoothing spline models
n = length(x1);
lev = matrix(0, n, n);
for(i in 1:n){
y1 = rep(0, n); y1[i]=1;
mod = loess(y1 ~ x1, mydata, span = sp,
control = loess.control(surface = "direct"));
yi = predict(mod, x1, se = TRUE)$fit
lev[,i]= yi;
}
lev = (lev+t(lev))/2
return(diag(lev))
}
onestep_CV <- function(x1, y1, sp){
## YOUR CODE:
## 1) fit a loess model y1 ~ x1 with span = sp, and extract
##    the corresponding residual vector
## 2) call lo.lev to obtain the diagonal entries of S
## 3) compute LOO-CV and GCV using formula from lecture notes
##    [lec_W5_NonlinearRegression.pdf] page 33.
return(list(cv = cv, gcv = gcv))
}
myCV <- function(x1, y1, span){
## x1, y1: two vectors
## span: a sequence of values for "span"
m = length(span)
cv = rep(0, m)
gcv = rep(0, m)
for(i in 1:m){
tmp = onestep_CV(x1, y1, span[i])
cv[i] = tmp$cv
gcv[i] = tmp$gcv
}
return(list(cv = cv, gcv = gcv))
}
smooth.matrix = function(x, df){
# return the smoother matrix with knots x and degree of freedom = df
# this function is for x having unique values
n = length(x);
A = matrix(0, n, n);
for(i in 1:n){
y = rep(0, n); y[i]=1;
yi = smooth.spline(x, y, df=df)$y;
A[,i]= yi;
}
return((A+t(A))/2)
}
mydata = read.csv(file = "Coding3_Bonus_Data.csv")
dim(mydata)
S4 = smooth.matrix(mydata$x, df=4)
my_S4 = lo.lev(mydata$x, sp=4)
View(S4)
View(S4)
lo.lev <- function(x1, sp){
## YOUR CODE: compute the diagonal entries of the smoother
##             matrix S, stored in vector "lev"
## Tip: check how we compute the smoother matrix
##      for smoothing spline models
n = length(x1);
lev = matrix(0, n, n);
for(i in 1:n){
y1 = rep(0, n); y1[i]=1;
mod = loess(y1 ~ x1, mydata, span = sp,
control = loess.control(surface = "direct"));
yi = predict(mod, x1, se = TRUE)$fit
lev[,i]= yi;
}
lev = (lev+t(lev))/2
return(lev)
#return(diag(lev))
}
onestep_CV <- function(x1, y1, sp){
## YOUR CODE:
## 1) fit a loess model y1 ~ x1 with span = sp, and extract
##    the corresponding residual vector
## 2) call lo.lev to obtain the diagonal entries of S
## 3) compute LOO-CV and GCV using formula from lecture notes
##    [lec_W5_NonlinearRegression.pdf] page 33.
return(list(cv = cv, gcv = gcv))
}
myCV <- function(x1, y1, span){
## x1, y1: two vectors
## span: a sequence of values for "span"
m = length(span)
cv = rep(0, m)
gcv = rep(0, m)
for(i in 1:m){
tmp = onestep_CV(x1, y1, span[i])
cv[i] = tmp$cv
gcv[i] = tmp$gcv
}
return(list(cv = cv, gcv = gcv))
}
smooth.matrix = function(x, df){
# return the smoother matrix with knots x and degree of freedom = df
# this function is for x having unique values
n = length(x);
A = matrix(0, n, n);
for(i in 1:n){
y = rep(0, n); y[i]=1;
yi = smooth.spline(x, y, df=df)$y;
A[,i]= yi;
}
return((A+t(A))/2)
}
mydata = read.csv(file = "Coding3_Bonus_Data.csv")
dim(mydata)
S4 = smooth.matrix(mydata$x, df=4)
my_S4 = lo.lev(mydata$x, sp=4)
mydata = read.csv(file = "Coding3_Bonus_Data.csv")
dim(mydata)
S4 = smooth.matrix(mydata$x, df=2)
my_S4 = lo.lev(mydata$x, sp=4)
mydata = read.csv(file = "Coding3_Bonus_Data.csv")
dim(mydata)
S4 = smooth.matrix(mydata$x, df=2)
my_S4 = lo.lev(mydata$x)
mydata = read.csv(file = "Coding3_Bonus_Data.csv")
dim(mydata)
S4 = smooth.matrix(mydata$x, df=2)
my_S4 = lo.lev(mydata$x,sp=0.75)
mydata = read.csv(file = "Coding3_Bonus_Data.csv")
dim(mydata)
fx = 1:50/50;
plot(mydata$x, mydata$y, xlab="", ylab="", ylim=c(-2.5, 3.7),
col="gray");
f = loess(y ~ x, mydata, span = 0.3,
control = loess.control(surface = "direct"))
lines(fx, predict(f, data.frame(x = fx)),
lty=1, lwd=2, col="red")
f = loess(y ~ x, mydata, span = 0.5,
control = loess.control(surface = "direct"))
lines(fx, predict(f, data.frame(x = fx)),
lty=2, lwd=2, col="blue")
f = loess(y ~ x, mydata, span = 0.7,
control = loess.control(surface = "direct"))
lines(fx, predict(f, data.frame(x = fx)),
lty=3, lwd=2, col="green")
lo.lev <- function(x1, sp){
## YOUR CODE: compute the diagonal entries of the smoother
##             matrix S, stored in vector "lev"
## Tip: check how we compute the smoother matrix
##      for smoothing spline models
n = length(x1);
lev = matrix(0, n, n);
for(i in 1:n){
y1 = rep(0, n); y1[i]=1;
los_model = loess(y1 ~ x1, mydata, span = sp,
control = loess.control(surface = "direct"));
yi = predict(model, x1, se = TRUE)$fit;
lev[,i]= yi;
}
lev = (lev+t(lev))/2
return(diag(lev))
}
onestep_CV <- function(x1, y1, sp){
## YOUR CODE:
## 1) fit a loess model y1 ~ x1 with span = sp, and extract
##    the corresponding residual vector
## 2) call lo.lev to obtain the diagonal entries of S
## 3) compute LOO-CV and GCV using formula from lecture notes
##    [lec_W5_NonlinearRegression.pdf] page 33.
los_model = loess(y1 ~ x1, mydata, span = sp,
control = loess.control(surface = "direct"));
residual = los_model$residuals
lev = lo.lev(x1, sp)
n = length(x1)
for (i in 1:n){
cv_temp ++ residual[i]/(1-lev[i])^2
gcv_temp ++ residual[i]/(1-mean(lev))^2
}
cv = cv_temp / n
gcv = gcv_temp / n
return(list(cv = cv, gcv = gcv))
}
myCV <- function(x1, y1, span){
## x1, y1: two vectors
## span: a sequence of values for "span"
m = length(span)
cv = rep(0, m)
gcv = rep(0, m)
for(i in 1:m){
tmp = onestep_CV(x1, y1, span[i])
cv[i] = tmp$cv
gcv[i] = tmp$gcv
}
return(list(cv = cv, gcv = gcv))
}
mydata = read.csv(file = "Coding3_Bonus_Data.csv")
dim(mydata)
span1 = seq(from = 0.2, by = 0.05, length = 15 )
cv.out = myCV(mydata$x, mydata$y, span1)
lo.lev <- function(x1, sp){
## YOUR CODE: compute the diagonal entries of the smoother
##             matrix S, stored in vector "lev"
## Tip: check how we compute the smoother matrix
##      for smoothing spline models
n = length(x1);
lev = matrix(0, n, n);
for(i in 1:n){
y1 = rep(0, n); y1[i]=1;
los_model = loess(y1 ~ x1, mydata, span = sp,
control = loess.control(surface = "direct"));
yi = predict(los_model, x1, se = TRUE)$fit;
lev[,i]= yi;
}
lev = (lev+t(lev))/2
return(diag(lev))
}
onestep_CV <- function(x1, y1, sp){
## YOUR CODE:
## 1) fit a loess model y1 ~ x1 with span = sp, and extract
##    the corresponding residual vector
## 2) call lo.lev to obtain the diagonal entries of S
## 3) compute LOO-CV and GCV using formula from lecture notes
##    [lec_W5_NonlinearRegression.pdf] page 33.
los_model = loess(y1 ~ x1, mydata, span = sp,
control = loess.control(surface = "direct"));
residual = los_model$residuals
lev = lo.lev(x1, sp)
n = length(x1)
for (i in 1:n){
cv_temp ++ residual[i]/(1-lev[i])^2
gcv_temp ++ residual[i]/(1-mean(lev))^2
}
cv = cv_temp / n
gcv = gcv_temp / n
return(list(cv = cv, gcv = gcv))
}
myCV <- function(x1, y1, span){
## x1, y1: two vectors
## span: a sequence of values for "span"
m = length(span)
cv = rep(0, m)
gcv = rep(0, m)
for(i in 1:m){
tmp = onestep_CV(x1, y1, span[i])
cv[i] = tmp$cv
gcv[i] = tmp$gcv
}
return(list(cv = cv, gcv = gcv))
}
mydata = read.csv(file = "Coding3_Bonus_Data.csv")
dim(mydata)
span1 = seq(from = 0.2, by = 0.05, length = 15 )
cv.out = myCV(mydata$x, mydata$y, span1)
lo.lev <- function(x1, sp){
## YOUR CODE: compute the diagonal entries of the smoother
##             matrix S, stored in vector "lev"
## Tip: check how we compute the smoother matrix
##      for smoothing spline models
n = length(x1);
lev = matrix(0, n, n);
for(i in 1:n){
y1 = rep(0, n); y1[i]=1;
los_model = loess(y1 ~ x1, mydata, span = sp,
control = loess.control(surface = "direct"));
yi = predict(los_model, x1, se = TRUE)$fit;
lev[,i]= yi;
}
lev = (lev+t(lev))/2
return(diag(lev))
}
onestep_CV <- function(x1, y1, sp){
## YOUR CODE:
## 1) fit a loess model y1 ~ x1 with span = sp, and extract
##    the corresponding residual vector
## 2) call lo.lev to obtain the diagonal entries of S
## 3) compute LOO-CV and GCV using formula from lecture notes
##    [lec_W5_NonlinearRegression.pdf] page 33.
los_model = loess(y1 ~ x1, mydata, span = sp,
control = loess.control(surface = "direct"));
residual = los_model$residuals
lev = lo.lev(x1, sp)
n = length(x1)
cv = 0
gcv = 0
for (i in 1:n){
cv =  cv + (residual[i]/(1-lev[i])^2)/n
gcv =  gcv+(residual[i]/(1-mean(lev))^2)/n
}
return(list(cv = cv, gcv = gcv))
}
myCV <- function(x1, y1, span){
## x1, y1: two vectors
## span: a sequence of values for "span"
m = length(span)
cv = rep(0, m)
gcv = rep(0, m)
for(i in 1:m){
tmp = onestep_CV(x1, y1, span[i])
cv[i] = tmp$cv
gcv[i] = tmp$gcv
}
return(list(cv = cv, gcv = gcv))
}
mydata = read.csv(file = "Coding3_Bonus_Data.csv")
dim(mydata)
span1 = seq(from = 0.2, by = 0.05, length = 15 )
cv.out = myCV(mydata$x, mydata$y, span1)
cv = cv.out$cv
gcv = cv.out$gcv
cbind(cv, gcv)
lo.lev <- function(x1, sp){
## YOUR CODE: compute the diagonal entries of the smoother
##             matrix S, stored in vector "lev"
## Tip: check how we compute the smoother matrix
##      for smoothing spline models
n = length(x1);
lev = matrix(0, n, n);
for(i in 1:n){
y1 = rep(0, n); y1[i]=1;
los_model = loess(y1 ~ x1, span = sp,
control = loess.control(surface = "direct"));
yi = predict(los_model, x1, se = TRUE)$fit;
lev[,i]= yi;
}
lev = (lev+t(lev))/2
return(diag(lev))
}
onestep_CV <- function(x1, y1, sp){
## YOUR CODE:
## 1) fit a loess model y1 ~ x1 with span = sp, and extract
##    the corresponding residual vector
## 2) call lo.lev to obtain the diagonal entries of S
## 3) compute LOO-CV and GCV using formula from lecture notes
##    [lec_W5_NonlinearRegression.pdf] page 33.
los_model = loess(y1 ~ x1, span = sp,
control = loess.control(surface = "direct"));
residual = los_model$residuals
lev = lo.lev(x1, sp)
n = length(x1)
cv = 0
gcv = 0
for (i in 1:n){
cv =  cv + (residual[i]/(1-lev[i])^2)/n
gcv =  gcv+(residual[i]/(1-mean(lev))^2)/n
}
return(list(cv = cv, gcv = gcv))
}
myCV <- function(x1, y1, span){
## x1, y1: two vectors
## span: a sequence of values for "span"
m = length(span)
cv = rep(0, m)
gcv = rep(0, m)
for(i in 1:m){
tmp = onestep_CV(x1, y1, span[i])
cv[i] = tmp$cv
gcv[i] = tmp$gcv
}
return(list(cv = cv, gcv = gcv))
}
mydata = read.csv(file = "Coding3_Bonus_Data.csv")
dim(mydata)
span1 = seq(from = 0.2, by = 0.05, length = 15 )
cv.out = myCV(mydata$x, mydata$y, span1)
cv = cv.out$cv
gcv = cv.out$gcv
cbind(cv, gcv)
lo.lev <- function(x1, sp){
## YOUR CODE: compute the diagonal entries of the smoother
##             matrix S, stored in vector "lev"
## Tip: check how we compute the smoother matrix
##      for smoothing spline models
n = length(x1);
lev = matrix(0, n, n);
for(i in 1:n){
y1 = rep(0, n); y1[i]=1;
los_model = loess(y1 ~ x1, span = sp,
control = loess.control(surface = "direct"));
yi = predict(los_model, x1, se = TRUE)$fit;
lev[,i]= yi;
}
lev = (lev+t(lev))/2
return(diag(lev))
}
onestep_CV <- function(x1, y1, sp){
## YOUR CODE:
## 1) fit a loess model y1 ~ x1 with span = sp, and extract
##    the corresponding residual vector
## 2) call lo.lev to obtain the diagonal entries of S
## 3) compute LOO-CV and GCV using formula from lecture notes
##    [lec_W5_NonlinearRegression.pdf] page 33.
los_model = loess(y1 ~ x1, span = sp,
control = loess.control(surface = "direct"));
residual = los_model$residuals
lev = lo.lev(x1, sp)
n = length(x1)
cv = 0
gcv = 0
for (i in 1:n){
cv =  cv + (residual[i]/(1-lev[i]))^2/n
gcv =  gcv+(residual[i]/(1-mean(lev)))^2/n
}
return(list(cv = cv, gcv = gcv))
}
myCV <- function(x1, y1, span){
## x1, y1: two vectors
## span: a sequence of values for "span"
m = length(span)
cv = rep(0, m)
gcv = rep(0, m)
for(i in 1:m){
tmp = onestep_CV(x1, y1, span[i])
cv[i] = tmp$cv
gcv[i] = tmp$gcv
}
return(list(cv = cv, gcv = gcv))
}
mydata = read.csv(file = "Coding3_Bonus_Data.csv")
dim(mydata)
span1 = seq(from = 0.2, by = 0.05, length = 15 )
cv.out = myCV(mydata$x, mydata$y, span1)
cv = cv.out$cv
gcv = cv.out$gcv
cbind(cv, gcv)
knitr::opts_chunk$set(echo = FALSE)
lo.lev <- function(x1, sp){
## YOUR CODE: compute the diagonal entries of the smoother
##             matrix S, stored in vector "lev"
## Tip: check how we compute the smoother matrix
##      for smoothing spline models
n = length(x1);
lev = matrix(0, n, n);
for(i in 1:n){
y1 = rep(0, n); y1[i]=1;
los_model = loess(y1 ~ x1, span = sp,
control = loess.control(surface = "direct"));
yi = predict(los_model, x1, se = TRUE)$fit;
lev[,i]= yi;
}
lev = (lev+t(lev))/2
return(diag(lev))
}
onestep_CV <- function(x1, y1, sp){
## YOUR CODE:
## 1) fit a loess model y1 ~ x1 with span = sp, and extract
##    the corresponding residual vector
## 2) call lo.lev to obtain the diagonal entries of S
## 3) compute LOO-CV and GCV using formula from lecture notes
##    [lec_W5_NonlinearRegression.pdf] page 33.
los_model = loess(y1 ~ x1, span = sp,
control = loess.control(surface = "direct"));
residual = los_model$residuals
lev = lo.lev(x1, sp)
n = length(x1)
cv = 0
gcv = 0
for (i in 1:n){
cv =  cv + (residual[i]/(1-lev[i]))^2/n
gcv =  gcv+(residual[i]/(1-mean(lev)))^2/n
}
return(list(cv = cv, gcv = gcv))
}
myCV <- function(x1, y1, span){
## x1, y1: two vectors
## span: a sequence of values for "span"
m = length(span)
cv = rep(0, m)
gcv = rep(0, m)
for(i in 1:m){
tmp = onestep_CV(x1, y1, span[i])
cv[i] = tmp$cv
gcv[i] = tmp$gcv
}
return(list(cv = cv, gcv = gcv))
}
mydata = read.csv(file = "Coding3_Bonus_Data.csv")
span1 = seq(from = 0.2, by = 0.05, length = 15 )
cv.out = myCV(mydata$x, mydata$y, span1)
cv = cv.out$cv
gcv = cv.out$gcv
cbind(cv, gcv)
